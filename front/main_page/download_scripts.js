class FileUploader {
    constructor() {
        this.fileInput = document.getElementById('fileInput');
        this.button1 = document.getElementById('button1');
        this.uploadContent = document.querySelector('.upload-content');
        this.fileInfo = document.getElementById('fileInfo');
				this.button2 = document.getElementById('button2')

        this.initEventListeners();
    }

    initEventListeners() {
        // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
        this.button1.addEventListener('click', () => {
            this.fileInput.click();
        });

        // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ input
        this.fileInput.addEventListener('change', (e) => {
            this.handleFileSelection(e);
        });

        // Drag and drop —Å–æ–±—ã—Ç–∏—è
        this.uploadContent.addEventListener('dragover', (e) => {
            this.handleDragOver(e);
        });

        this.uploadContent.addEventListener('dragleave', (e) => {
            this.handleDragLeave(e);
        });

        this.uploadContent.addEventListener('drop', (e) => {
            this.handleDrop(e);
        });

				this.button2.addEventListener('click', () => {
					window.location.href = "/front/general_info_page/general_page.html"
				})
    }

    handleFileSelection(event) {
        const target = event.target;
        if (target.files && target.files.length > 0) {
            this.processFile(target.files[0]);
        }
    }

    handleDragOver(event) {
        event.preventDefault();
        this.uploadContent.classList.add('drag-over');
    }

    handleDragLeave(event) {
        event.preventDefault();
        this.uploadContent.classList.remove('drag-over');
    }

    handleDrop(event) {
        event.preventDefault();
        this.uploadContent.classList.remove('drag-over');

        if (event.dataTransfer && event.dataTransfer.files.length > 0) {
            const file = event.dataTransfer.files[0];
            if (this.isValidFileType(file)) {
                this.processFile(file);
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv, .xls –∏–ª–∏ .xlsx');
            }
        }
    }

    isValidFileType(file) {
        const allowedTypes = ['.csv', '.xls', '.xlsx'];
        const fileName = file.name.toLowerCase();
        
        return allowedTypes.some(ext => fileName.endsWith(ext));
    }

    processFile(file) {
        if (!this.isValidFileType(file)) {
            alert('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .csv, .xls, .xlsx');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        this.displayFileInfo(file);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        this.uploadFile(file);
    }

    displayFileInfo(file) {
        const fileSize = this.formatFileSize(file.size);
        
        this.fileInfo.innerHTML = `
            <div class="file-name">üìÑ ${file.name}</div>
            <div class="file-size">–†–∞–∑–º–µ—Ä: ${fileSize}</div>
        `;
        this.fileInfo.style.display = 'block';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    uploadFile(file) {
        // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name);
        
        // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const formData = new FormData();
        formData.append('file', file);

        // –ü—Ä–∏–º–µ—Ä AJAX –∑–∞–ø—Ä–æ—Å–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        /*
        fetch('/upload', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', data);
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        });
        */
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    new FileUploader();
});