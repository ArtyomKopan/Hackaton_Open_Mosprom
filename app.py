import pandas as pd
import base64
import io
import dash
from dash import dcc, html, Input, Output, State

print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("üìä –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ú–æ—Å–∫–≤—ã", 
            style={'textAlign': 'center', 'color': '#2c3e50'}),
    
    html.Div([
        html.P("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CSV (.csv), Excel (.xlsx, .xls)"),
        html.P("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å CSV –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    ], style={'textAlign': 'center', 'margin': '10px'}),
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    dcc.Upload(
        id='upload-data',
        children=html.Div([
            'üìé –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ ',
            html.A('–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞')
        ]),
        style={
            'width': '80%', 'height': '60px', 'lineHeight': '60px',
            'borderWidth': '2px', 'borderStyle': 'dashed', 
            'borderRadius': '10px', 'textAlign': 'center', 
            'margin': '20px auto', 'backgroundColor': '#f0f8ff',
            'borderColor': '#4CAF50', 'cursor': 'pointer'
        },
        multiple=False
    ),
    
    # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    html.Div(id='output-message', style={
        'margin': '20px', 
        'fontSize': '16px',
        'padding': '10px',
        'borderRadius': '5px'
    }),
    
    # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    html.Div(id='output-data', style={'margin': '20px'})
])

def parse_file(contents, filename):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {filename}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content_type, content_string = contents.split(',')
        decoded = base64.b64decode(content_string)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = filename.lower().split('.')[-1]
        print(f"üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —á—Ç–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_extension == 'csv':
            try:
                # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–∫ CSV
                df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
                print(f"‚úÖ CSV –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {len(df)} —Å—Ç—Ä–æ–∫")
                return df, f"‚úÖ CSV —Ñ–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ({len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤)"
            except Exception as csv_error:
                return None, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {str(csv_error)}"
                
        elif file_extension in ['xlsx', 'xlsm']:
            try:
                # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Excel
                df = pd.read_excel(io.BytesIO(decoded), engine='openpyxl')
                print(f"‚úÖ XLSX –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {len(df)} —Å—Ç—Ä–æ–∫")
                return df, f"‚úÖ Excel —Ñ–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ({len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤)"
            except Exception as xlsx_error:
                return None, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (XLSX): {str(xlsx_error)}"
                
        elif file_extension == 'xls':
            try:
                # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–∫ —Å—Ç–∞—Ä—ã–π Excel
                df = pd.read_excel(io.BytesIO(decoded), engine='xlrd')
                print(f"‚úÖ XLS –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {len(df)} —Å—Ç—Ä–æ–∫")
                return df, f"‚úÖ Excel —Ñ–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ({len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤)"
            except Exception as xls_error:
                return None, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel (XLS): {str(xls_error)}"
                
        else:
            return None, f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .{file_extension}"
            
    except Exception as e:
        error_msg = f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        print(error_msg)
        return None, error_msg

def create_data_preview(df, filename):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"""
    return html.Div([
        html.H4("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 
                style={'color': '#2c3e50', 'marginBottom': '20px'}),
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        html.Div([
            html.Div([
                html.Div(f"üìÅ {filename}", 
                        style={'fontWeight': 'bold', 'marginBottom': '5px'}),
                html.Div(f"–§–æ—Ä–º–∞—Ç: {', '.join([str(dtype) for dtype in df.dtypes.unique()])}",
                        style={'fontSize': '14px', 'color': '#666'})
            ], style={'flex': '1', 'padding': '10px'}),
            
            html.Div([
                html.Div(f"üìä {len(df)}", 
                        style={'fontSize': '24px', 'fontWeight': 'bold', 'color': '#3498db'}),
                html.Div("—Å—Ç—Ä–æ–∫", style={'fontSize': '14px'})
            ], style={'flex': '1', 'padding': '10px', 'textAlign': 'center'}),
            
            html.Div([
                html.Div(f"üè∑Ô∏è {len(df.columns)}", 
                        style={'fontSize': '24px', 'fontWeight': 'bold', 'color': '#e74c3c'}),
                html.Div("—Å—Ç–æ–ª–±—Ü–æ–≤", style={'fontSize': '14px'})
            ], style={'flex': '1', 'padding': '10px', 'textAlign': 'center'})
        ], style={'display': 'flex', 'justifyContent': 'space-between', 'marginBottom': '20px',
                  'border': '1px solid #ddd', 'borderRadius': '5px', 'padding': '10px'}),
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        html.Div([
            html.H5("–°—Ç–æ–ª–±—Ü—ã –¥–∞–Ω–Ω—ã—Ö:", style={'marginBottom': '10px'}),
            html.Ul([html.Li(f"{col} ({df[col].dtype})") for col in df.columns],
                   style={'columns': '2', 'fontSize': '14px'})
        ], style={'marginBottom': '20px'}),
        
        html.Hr(),
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        html.H5("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):"),
        html.Table([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            html.Thead([
                html.Tr([html.Th(col, style={
                    'border': '1px solid #ddd', 
                    'padding': '8px',
                    'backgroundColor': '#34495e',
                    'color': 'white',
                    'textAlign': 'left'
                }) for col in df.columns])
            ]),
            # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            html.Tbody([
                html.Tr([html.Td(df.iloc[i][col], style={
                    'border': '1px solid #ddd', 
                    'padding': '8px',
                    'backgroundColor': '#f8f9fa' if i % 2 == 0 else 'white'
                }) for col in df.columns])
                for i in range(min(5, len(df)))
            ])
        ], style={
            'width': '100%', 
            'borderCollapse': 'collapse',
            'marginTop': '10px',
            'fontSize': '14px'
        }),
        
        html.Div(f"* –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫ –∏–∑ {len(df)}", 
                style={'fontSize': '12px', 'color': '#666', 'marginTop': '10px'})
    ])

@app.callback(
    [Output('output-message', 'children'),
     Output('output-data', 'children')],
    Input('upload-data', 'contents'),
    State('upload-data', 'filename')
)
def update_output(contents, filename):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    if contents is not None and filename is not None:
        df, message = parse_file(contents, filename)
        
        if df is not None:
            # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            preview = create_data_preview(df, filename)
            return html.Div(message, style={'color': 'green', 'fontWeight': 'bold'}), preview
        else:
            # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            return html.Div(message, style={'color': 'red', 'fontWeight': 'bold'}), ""
    
    return html.Div("üìÅ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...", style={'color': '#666'}), ""

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8050/")
    app.run(debug=True)