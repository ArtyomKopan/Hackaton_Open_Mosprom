import requests
import pandas as pd
import argparse
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import sys
import os


class FNSAPIClient:
    def __init__(self, api_key: str, base_url: str):
        self.api_key = api_key
        self.base_url = base_url
        self.session = requests.Session()
        self.requests_count = 0

    def make_request(self, endpoint: str, params: Dict) -> Optional[Dict]:

        try:
            url = f"{self.base_url}/{endpoint}"
            params['key'] = self.api_key

            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()

            self.requests_count += 1

            try:
                return response.json()
            except json.JSONDecodeError:
                return None

        except requests.exceptions.RequestException:
            return None

    def get_organization_info(self, inn: str, endpoint: str = 'egr') -> Optional[Dict]:
        return self.make_request(endpoint, {'req': inn})


def extract_comprehensive_data(fns_response: Dict, inn: str) -> Dict:

    data = {'ИНН': inn}

    if not fns_response or 'items' not in fns_response or not fns_response['items']:
        return data

    org_data = fns_response['items'][0]

    if 'ЮЛ' in org_data:
        yul_data = org_data['ЮЛ']

        # === БАЗОВЫЕ РЕКВИЗИТЫ ===
        basic_fields = {
            'ИНН': 'ИНН', 'КПП': 'КПП', 'ОГРН': 'ОГРН', 'ОКПО': 'ОКПО',
            'ДатаОГРН': 'Дата регистрации', 'ДатаРег': 'Дата регистрации',
            'Статус': 'Статус организации', 'НаимСокрЮЛ': 'Наименование организации',
            'НаимПолнЮЛ': 'Полное наименование организации'
        }

        for api_field, our_field in basic_fields.items():
            if api_field in yul_data and yul_data[api_field]:
                data[our_field] = yul_data[api_field]

        # === АДРЕСНЫЕ ДАННЫЕ ===
        if 'Адрес' in yul_data:
            address_data = yul_data['Адрес']
            if isinstance(address_data, dict):
                if 'АдресПолн' in address_data:
                    full_address = address_data['АдресПолн']
                    data['Юридический адрес'] = full_address
                    data['Адрес производства'] = full_address
                    data['Адрес дополнительной площадки'] = full_address
                    
                if 'Индекс' in address_data:
                    data['Индекс'] = address_data['Индекс']

        # === РУКОВОДИТЕЛЬ И КОНТАКТЫ ===
        if 'Руководитель' in yul_data:
            director_data = yul_data['Руководитель']
            if isinstance(director_data, dict):
                director_name = f"{director_data.get('Должн', '')} {director_data.get('ФИОПолн', '')}".strip()
                data['Руководитель'] = director_name
                data['Контактные данные руководства'] = director_name

        # === КОНТАКТНАЯ ИНФОРМАЦИЯ ===
        if 'Контакты' in yul_data:
            contacts = yul_data['Контакты']
            if isinstance(contacts, dict):
                if 'Телефон' in contacts and contacts['Телефон']:
                    data['Номер телефона'] = ', '.join(contacts['Телефон'][:3])
                
                if 'e-mail' in contacts and contacts['e-mail']:
                    data['Электронная почта'] = contacts['e-mail'][0]
                    data['Почта руководства'] = contacts['e-mail'][0]
                
                if 'Сайт' in contacts and contacts['Сайт']:
                    data['Сайт'] = contacts['Сайт'][0]

        # === ВИДЫ ДЕЯТЕЛЬНОСТИ И ОТРАСЛИ ===
        if 'ОснВидДеят' in yul_data:
            activity = yul_data['ОснВидДеят']
            if isinstance(activity, dict):
                if 'Код' in activity:
                    data['Основной ОКВЭД (СПАРК)'] = activity['Код']
                    data['Производственный ОКВЭД'] = activity['Код']
                    
                if 'Текст' in activity:
                    activity_text = activity['Текст']
                    data['Вид деятельности по основному ОКВЭД (СПАРК)'] = activity_text
                    data['Вид деятельности по производственному ОКВЭД'] = activity_text
                    data['Общие сведения об организации'] = activity_text

                    # Определение отраслей на основе реальных данных
                    industry_info = determine_detailed_industries(activity_text)
                    data.update(industry_info)

        # === ДОПОЛНИТЕЛЬНЫЕ ВИДЫ ДЕЯТЕЛЬНОСТИ ===
        if 'ДопВидДеят' in yul_data and yul_data['ДопВидДеят']:
            activities = []
            okved_codes = []
            for activity in yul_data['ДопВидДеят']:
                if isinstance(activity, dict) and 'Текст' in activity:
                    activities.append(activity['Текст'])
                if isinstance(activity, dict) and 'Код' in activity:
                    okved_codes.append(activity['Код'])
            
            if activities:
                data['Отраслевые презентации'] = '; '.join(activities[:5])
                data['Дополнительная отрасль'] = '; '.join(activities[:2])
                data['Подотрасль (Дополнительная)'] = '; '.join(activities[:3])
            
            if okved_codes:
                data['Перечень производимой продукции по кодам ОКПД 2'] = '; '.join(okved_codes[:5])

        # === УСТАВНЫЙ КАПИТАЛ ===
        if 'Капитал' in yul_data:
            capital = yul_data['Капитал']
            if isinstance(capital, dict):
                capital_info = []
                for key, value in capital.items():
                    capital_info.append(f"{key}: {value}")
                capital_text = '; '.join(capital_info)
                if 'Общие сведения об организации' in data:
                    data['Общие сведения об организации'] += f"; {capital_text}"
                else:
                    data['Общие сведения об организации'] = capital_text

        # === ЛИЦЕНЗИИ ===
        if 'Лицензии' in yul_data and yul_data['Лицензии']:
            licenses = []
            for license_data in yul_data['Лицензии'][:2]:
                if isinstance(license_data, dict) and 'ВидДеятельности' in license_data:
                    licenses.append(license_data['ВидДеятельности'])
            if licenses:
                data['Наличие особого статуса'] = 'Есть лицензии'

        # === УЧАСТИЯ В ДРУГИХ ОРГАНИЗАЦИЯХ ===
        if 'Участия' in yul_data and yul_data['Участия']:
            participations = []
            inns = []
            for part in yul_data['Участия'][:3]:
                if isinstance(part, dict):
                    if 'НаимСокрЮЛ' in part:
                        participations.append(part['НаимСокрЮЛ'])
                    if 'ИНН' in part:
                        inns.append(part['ИНН'])
            
            if participations:
                data['Головная организация'] = '; '.join(participations[:2])
            if inns:
                data['ИНН головной организации'] = '; '.join(inns[:2])

        # === СТАТУСЫ НА ОСНОВЕ РЕАЛЬНЫХ ДАННЫХ ===
        if 'Статус' in yul_data:
            status = yul_data['Статус']
            data['Статус СПАРК'] = 'Действующее' if 'действующ' in str(status).lower() else 'Не действующее'

    return data


def determine_detailed_industries(activity: str) -> Dict:
    
    activity_lower = activity.lower()

    data = {}

    # Основная отрасль на основе реального вида деятельности
    industry_mapping = {
        'нефть': ('Нефтегазовая промышленность', 'Добыча нефти и газа'),
        'газ': ('Нефтегазовая промышленность', 'Добыча и транспортировка газа'),
        'энерг': ('Энергетика', 'Производство электроэнергии'),
        'электр': ('Энергетика', 'Электроснабжение'),
        'металл': ('Металлургия', 'Производство металлов'),
        'сталь': ('Металлургия', 'Сталелитейное производство'),
        'хим': ('Химическая промышленность', 'Химическое производство'),
        'машиностр': ('Машиностроение', 'Производство оборудования'),
        'авто': ('Машиностроение', 'Автомобилестроение'),
        'строит': ('Строительство', 'Строительные материалы'),
        'пищев': ('Пищевая промышленность', 'Производство продуктов питания'),
        'транспорт': ('Транспорт', 'Транспортные услуги'),
        'связь': ('Телекоммуникации', 'Связь и коммуникации'),
        'телеком': ('Телекоммуникации', 'Телекоммуникационные услуги'),
        'банк': ('Финансовые услуги', 'Банковские услуги'),
        'страхован': ('Финансовые услуги', 'Страхование'),
        'фармац': ('Фармацевтика', 'Производство лекарств'),
        'лекарств': ('Фармацевтика', 'Фармацевтическое производство'),
        'железнодорож': ('Транспорт', 'Железнодорожные перевозки'),
        'авиа': ('Транспорт', 'Авиаперевозки'),
    }

    for keyword, (industry, subindustry) in industry_mapping.items():
        if keyword in activity_lower:
            data['Основная отрасль'] = industry
            data['Подотрасль (Основная)'] = subindustry
            data['Отрасль промышленности по Спарк и Справочнику'] = industry
            break

    return data


def get_companies_data(api_key: str, companies_list: List[Dict]) -> List[Tuple[str, str]]:
    
    client = FNSAPIClient(api_key, base_url="https://api-fns.ru/api")
    
    
    company_results = []
    
    for company in companies_list:
        inn = company.get('inn')
        if not inn:
            continue
            
        # Получаем название компании если есть в словаре
        name = company.get('name', f'Организация {inn}')
        
        org_data = client.get_organization_info(inn)
        
        if org_data:
            company_results.append((inn, name))

        else:
            company_results.append((inn, name))
        
        time.sleep(0.3) 
    
    return company_results


def get_complete_template_columns() -> List[str]:

    #Полный список всех колонок из шаблона
    return [
        '№', 'ИНН', 'Наименование организации', 'Полное наименование организации', 'Статус СПАРК',
        'Статус внутренний', 'Статус ИТОГ', 'Дата добавления в реестр', 'Юридический адрес',
        'Адрес производства', 'Адрес дополнительной площадки', 'Основная отрасль', 'Подотрасль (Основная)',
        'Дополнительная отрасль', 'Подотрасль (Дополнительная)', 'Отраслевые презентации',
        'Основной ОКВЭД (СПАРК)', 'Вид деятельности по основному ОКВЭД (СПАРК)', 'Производственный ОКВЭД',
        'Вид деятельности по производственному ОКВЭД', 'Общие сведения об организации',
        'Размер предприятия (итог)', 'Размер предприятия (итог) 2022', 'Размер предприятия (по численности)',
        'Размер предприятия (по численности) 2022', 'Размер предприятия (по выручке)',
        'Размер предприятия (по выручке) 2022', 'Дата регистрации', 'Руководитель', 'Головная организация',
        'ИНН головной организации', 'Вид отношения головной организации', 'Контактные данные руководства',
        'Почта руководства', 'Контакт сотрудника организации', 'Номер телефона',
        'Контактные данные ответственного по ЧС', 'Сайт', 'Электронная почта', 'Данные о мерах поддержки',
        'Наличие особого статуса', 'Площадка итог', 'Получена поддержка от г. Москвы',
        'Системообразующее предприятие', 'Статус МСП', 'То самое', 'Финансово-экономические показатели',
        'Выручка предприятия, тыс. руб. 2017', 'Выручка предприятия, тыс. руб. 2018',
        'Выручка предприятия, тыс. руб. 2019', 'Выручка предприятия, тыс. руб. 2020',
        'Выручка предприятия, тыс. руб. 2021', 'Выручка предприятия, тыс. руб. 2022',
        'Выручка предприятия, тыс. руб. 2023', 'Чистая прибыль (убыток),тыс. руб. 2017',
        'Чистая прибыль (убыток),тыс. руб. 2018', 'Чистая прибыль (убыток),тыс. руб. 2019',
        'Чистая прибыль (убыток),тыс. руб. 2020', 'Чистая прибыль (убыток),тыс. руб. 2021',
        'Чистая прибыль (убыток),тыс. руб. 2022', 'Чистая прибыль (убыток),тыс. руб. 2023',
        'Среднесписочная численность персонала (всего по компании), чел 2017',
        'Среднесписочная численность персонала (всего по компании), чел 2018',
        'Среднесписочная численность персонала (всего по компании), чел 2019',
        'Среднесписочная численность персонала (всего по компании), чел 2020',
        'Среднесписочная численность персонала (всего по компании), чел 2021',
        'Среднесписочная численность персонала (всего по компании), чел 2022',
        'Среднесписочная численность персонала (всего по компании), чел 2023',
        'Среднесписочная численность персонала, работающего в Москве, чел 2017',
        'Среднесписочная численность персонала, работающего в Москве, чел 2018',
        'Среднесписочная численность персонала, работающего в Москве, чел 2019',
        'Среднесписочная численность персонала, работающего в Москве, чел 2020',
        'Среднесписочная численность персонала, работающего в Москве, чел 2021',
        'Среднесписочная численность персонала, работающего в Москве, чел 2022',
        'Среднесписочная численность персонала, работающего в Москве, чел 2023',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2017',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2018',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2019',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2020',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2021',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2022',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2023',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб 2017',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб 2018',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб 2019',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб 2020',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб. 2021',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб. 2022',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб. 2023',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2017',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2018',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2019',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2020',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2021',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2022',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2023',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2017',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2018',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2019',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2020',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2021',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2022',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2023',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2017',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2018',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2019',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2020',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2021',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2022',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2023',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2024',
        'Налог на прибыль, тыс.руб. 2017', 'Налог на прибыль, тыс.руб. 2018',
        'Налог на прибыль, тыс.руб. 2019', 'Налог на прибыль, тыс.руб. 2020',
        'Налог на прибыль, тыс.руб. 2021', 'Налог на прибыль, тыс.руб. 2022',
        'Налог на прибыль, тыс.руб. 2023', 'Налог на прибыль, тыс.руб. 2024',
        'Налог на имущество, тыс.руб. 2017', 'Налог на имущество, тыс.руб. 2018',
        'Налог на имущество, тыс.руб. 2019', 'Налог на имущество, тыс.руб. 2020',
        'Налог на имущество, тыс.руб. 2021', 'Налог на имущество, тыс.руб. 2022',
        'Налог на имущество, тыс.руб. 2023', 'Налог на имущество, тыс.руб. 2024',
        'Налог на землю, тыс.руб. 2017', 'Налог на землю, тыс.руб. 2018',
        'Налог на землю, тыс.руб. 2019', 'Налог на землю, тыс.руб. 2020',
        'Налог на землю, тыс.руб. 2021', 'Налог на землю, тыс.руб. 2022',
        'Налог на землю, тыс.руб. 2023', 'Налог на землю, тыс.руб. 2024',
        'НДФЛ, тыс.руб. 2017', 'НДФЛ, тыс.руб. 2018', 'НДФЛ, тыс.руб. 2019',
        'НДФЛ, тыс.руб. 2020', 'НДФЛ, тыс.руб. 2021', 'НДФЛ, тыс.руб. 2022',
        'НДФЛ, тыс.руб. 2023', 'НДФЛ, тыс.руб. 2024',
        'Транспортный налог, тыс.руб. 2017', 'Транспортный налог, тыс.руб. 2018',
        'Транспортный налог, тыс.руб. 2019', 'Транспортный налог, тыс.руб. 2020',
        'Транспортный налог, тыс.руб. 2021', 'Транспортный налог, тыс.руб. 2022',
        'Транспортный налог, тыс.руб. 2023', 'Транспортный налог, тыс.руб. 2024',
        'Прочие налоги 2017', 'Прочие налоги 2018', 'Прочие налоги 2019',
        'Прочие налоги 2020', 'Прочие налоги 2021', 'Прочие налоги 2022',
        'Прочие налоги 2023', 'Прочие налоги 2024',
        'Акцизы, тыс. руб. 2017', 'Акцизы, тыс. руб. 2018', 'Акцизы, тыс. руб. 2019',
        'Акцизы, тыс. руб. 2020', 'Акцизы, тыс. руб. 2021', 'Акцизы, тыс. руб. 2022',
        'Акцизы, тыс. руб. 2023', 'Акцизы, тыс. руб. 2024',
        'Инвестиции в Мск 2021 тыс. руб.', 'Инвестиции в Мск 2022 тыс. руб.',
        'Инвестиции в Мск 2023 тыс. руб.', 'Объем экспорта, тыс. руб. 2019',
        'Объем экспорта, тыс. руб. 2020', 'Объем экспорта, тыс. руб. 2021',
        'Объем экспорта, тыс. руб. 2022', 'Объем экспорта, тыс. руб. 2023',
        'Имущественно-земельный комплекс', 'Кадастровый номер ЗУ', 'Площадь ЗУ',
        'Вид разрешенного использования ЗУ', 'Вид собственности ЗУ', 'Собственник ЗУ',
        'Кадастровый номер ОКСа', 'Площадь ОКСов', 'Вид разрешенного использования ОКСов',
        'Тип строения и цель использования', 'Вид собственности ОКСов', 'СобственникОКСов',
        'Площадь производственных помещений, кв.м.', 'Производимая продукция',
        'Стандартизированная продукция', 'Название (виды производимой продукции)',
        'Перечень производимой продукции по кодам ОКПД 2',
        'Перечень производимой продукции по типам и сегментам', 'Каталог продукции',
        'Наличие  госзаказа', 'Уровень загрузки производственных мощностей',
        'Наличие поставок продукции на экспорт', 'Объем экспорта (млн.руб.) за предыдущий календарный год',
        'Перечень государств куда экспортируется продукция', 'Код ТН ВЭД ЕАЭС',
        'Развитие Реестра', 'Отрасль промышленности по Спарк и Справочнику',
        'Координаты юридического адреса', 'Координаты адреса производства',
        'Координаты адреса дополнительной площадки', 'Координаты (широта)',
        'Координаты (долгота)', 'Округ', 'Район'
    ]


def create_complete_template(api_key: str, companies_list: List[Dict]) -> pd.DataFrame:

    companies = get_companies_data(api_key, companies_list)

    if not companies:
        print("❌ Не удалось получить данные по компаниям", file=sys.stderr)
        return pd.DataFrame()

    client = FNSAPIClient(api_key, base_url="https://api-fns.ru/api")
    all_organizations = []

    template_columns = get_complete_template_columns()


    for i, (inn, name) in enumerate(companies, 1):

        record = {col: 'ДАННЫЕ ОТСУТСТВУЮТ В API' for col in template_columns}

        # Системные поля
        record['№'] = i
        record['ИНН'] = inn
        record['Дата добавления в реестр'] = datetime.now().strftime('%Y-%m-%d')
        record['Статус внутренний'] = 'Активный'
        record['Статус ИТОГ'] = 'В работе'
        record['Финансово-экономические показатели'] = 'ДАННЫЕ ОТСУТСТВУЮТ В API'
        record['Наименование организации'] = name
        record['Полное наименование организации'] = name

        # Получаем реальные данные из ФНС
        org_data = client.get_organization_info(inn)
        if org_data:
            detailed_data = extract_comprehensive_data(org_data, inn)
            
            for key, value in detailed_data.items():
                if key in record and value:  
                    record[key] = value

        print(f"✅ {i}/{len(companies)} {name}", file=sys.stderr)
        all_organizations.append(record)
        time.sleep(0.5)

    return pd.DataFrame(all_organizations, columns=template_columns)


def main():
    parser = argparse.ArgumentParser(description='Сбор данных компаний из ФНС')
    parser.add_argument('--api-key', type=str, required=True, help='API ключ от ФНС')
    parser.add_argument('--companies-file', type=str, help='JSON файл со списком компаний')

    args = parser.parse_args()

    # Пример списка компаний для обработки
    companies_to_process = [
        {'inn': '7706092528', 'name': 'ПАО "ГАЗПРОМ"'},
        {'inn': '7702070731', 'name': 'ПАО "ЛУКОЙЛ"'},
        {'inn': '7710030411', 'name': 'ПАО "РОСТЕЛЕКОМ"'},
    ]

    # Если указан файл с компаниями, загружаем из него
    if args.companies_file and os.path.exists(args.companies_file):
        try:
            with open(args.companies_file, 'r', encoding='utf-8') as f:
                companies_to_process = json.load(f)

        except Exception as e:
            print(f"Ошибка загрузки файла: {e}", file=sys.stderr)

    try:
        df = create_complete_template(args.api_key, companies_to_process)

        if df.empty:
            print("Не удалось собрать данные", file=sys.stderr)
            return

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"fns_data_{timestamp}"

        csv_filename = f"{filename}.csv"
        df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
        

        # Статистика
        total_fields = len(df.columns) * len(df)
        filled_fields = (df.map(lambda x: x != 'ДАННЫЕ ОТСУТСТВУЮТ В API' and pd.notna(x))).sum().sum()
        fill_percentage = (filled_fields / total_fields * 100) if total_fields > 0 else 0

        print(f"\n📊 Статистика:", file=sys.stderr)
        print(f"   - Компаний обработано: {len(df)}", file=sys.stderr)
        print(f"   - Всего полей: {total_fields}", file=sys.stderr)
        print(f"   - Заполнено полей: {filled_fields} ({fill_percentage:.1f}%)", file=sys.stderr)

        # Показываем первые несколько строк данных
        print(f"\n📋 Предпросмотр данных (первые 3 строки):", file=sys.stderr)
        preview_columns = ['№', 'ИНН', 'Наименование организации', 'Основная отрасль', 'Статус СПАРК']
        available_columns = [col for col in preview_columns if col in df.columns]
        if available_columns:
            print(df[available_columns].head(3).to_string(index=False), file=sys.stderr)

    except Exception as e:
        print(f"❌ Ошибка: {e}", file=sys.stderr)


if __name__ == "__main__":
    main()