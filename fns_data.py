import requests
import pandas as pd
import argparse
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import sys
import os

class FNSAPIClient:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api-fns.ru/api"
        self.session = requests.Session()
        self.requests_count = 0
        
    def make_request(self, endpoint: str, params: Dict) -> Optional[Dict]:
        """Базовый метод для выполнения запросов"""
        try:
            url = f"{self.base_url}/{endpoint}"
            params['key'] = self.api_key
            
            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            self.requests_count += 1
            
            try:
                return response.json()
            except json.JSONDecodeError:
                return None
            
        except requests.exceptions.RequestException:
            return None
    
    def get_organization_info(self, inn: str) -> Optional[Dict]:
        """Получает основные сведения об организации по ИНН"""
        return self.make_request('egr', {'req': inn})
    
    def get_finance_data(self, inn: str) -> Optional[Dict]:
        """Получает финансовые данные"""
        return self.make_request('finance', {'req': inn})

def get_companies_with_high_data_quality() -> List[Tuple[str, str]]:
    """
    Возвращает список ИНН компаний, у которых вероятно больше всего данных
    Приоритет отдается:
    1. Крупным публичным компаниям (отчетность в открытом доступе)
    2. Компаниям с детализированными видами деятельности
    3. Производственным предприятиям
    4. Компаниям с полными контактными данными
    """
    
    # Компании с высокой вероятностью наличия данных
    high_data_companies = [
        # Публичные компании с открытой отчетностью
        ('7706092528', 'ПАО "ГАЗПРОМ"'),  # Полная отчетность, много данных
        ('7702070731', 'ПАО "ЛУКОЙЛ"'),   # Крупная нефтяная компания
        ('7710030411', 'ПАО "РОСТЕЛЕКОМ"'), # Телеком, детальные данные
        ('7705019849', 'ПАО "СБЕРБАНК"'),  # Финансовые данные
        ('7714068340', 'ПАО "РОССЕТИ"'),   # Энергетика, инфраструктура
        
        # Крупные промышленные предприятия
        ('7723504326', 'ПАО "НЛМК"'),      # Металлургия, производство
        ('7708514824', 'ПАО "ММК"'),       # Металлургический комбинат
        ('7714018006', 'ПАО "МОСЭНЕРГО"'), # Энергетика, теплостанции
        ('7710058492', 'ПАО "Т ПЛЮС"'),    # Энергетика
        
        # Компании с развернутыми данными
        ('7720575550', 'АО "ГОЗНАК"'),     # Производство, госзаказ
        ('7710498053', 'ПАО "ТАТНЕФТЬ"'),  # Нефтедобыча
        ('7705182000', 'ПАО "СУРГУТНЕФТЕГАЗ"'), # Нефтегаз
        ('7736050003', 'ПАО "ГМК Норильский никель"'), # Металлургия
        
        # Компании с производственными активами
        ('7702204403', 'ПАО "СИБУР Холдинг"'), # Химическая промышленность
        ('7710565830', 'ОАО "ЧЕРКИЗОВО"'),     # Пищевая промышленность
        ('7705031670', 'ПАО "МТС"'),           # Телеком, инфраструктура
        ('7743001840', 'ПАО "МЕГАФОН"'),       # Телеком
        
        # Дополнительные компании с данными
        ('7701611748', 'ПАО "Аэрофлот"'),      # Транспорт
        ('7713064401', 'ПАО "РусГидро"'),      # Энергетика
        ('7709527507', 'ПАО "ВТБ"'),           # Банкинг
        ('7702031599', 'ПАО "НОВАТЭК"'),       # Нефтегаз
        
        # Дополнительные компании для разнообразия отраслей
        ('7712032801', 'ПАО "Фармстандарт"'),  # Фармацевтика
        ('7728546486', 'ПАО "Объединенные кондитеры"'), # Пищепром
        ('7716690054', 'АО "РЖД"'),            # Транспорт
        ('7709284777', 'ПАО "Северсталь"'),    # Металлургия
        ('7714006307', 'ПАО "МОЭК"'),          # Энергетика
    ]
    
    return high_data_companies

def analyze_data_completeness(org_data: Dict) -> int:
    """Анализирует полноту данных организации и возвращает оценку (0-100)"""
    if not org_data or 'items' not in org_data or not org_data['items']:
        return 0
    
    score = 0
    org_item = org_data['items'][0]
    
    if 'ЮЛ' in org_item:
        yul_data = org_item['ЮЛ']
        
        # Базовые реквизиты (20 баллов)
        basic_fields = ['ИНН', 'ОГРН', 'КПП', 'НаимСокрЮЛ', 'НаимПолнЮЛ']
        for field in basic_fields:
            if field in yul_data and yul_data[field]:
                score += 4
        
        # Адресные данные (10 баллов)
        if 'Адрес' in yul_data and isinstance(yul_data['Адрес'], dict):
            if 'АдресПолн' in yul_data['Адрес']:
                score += 10
        
        # Руководитель (10 баллов)
        if 'Руководитель' in yul_data and isinstance(yul_data['Руководитель'], dict):
            if 'ФИОПолн' in yul_data['Руководитель']:
                score += 10
        
        # Контактные данные (15 баллов)
        if 'Контакты' in yul_data:
            contacts = yul_data['Контакты']
            if isinstance(contacts, dict):
                if contacts.get('Телефон'):
                    score += 5
                if contacts.get('e-mail'):
                    score += 5
                if contacts.get('Сайт'):
                    score += 5
        
        # Виды деятельности (15 баллов)
        if 'ОснВидДеят' in yul_data:
            score += 10
        if 'ДопВидДеят' in yul_data and yul_data['ДопВидДеят']:
            score += 5
        
        # Дополнительные данные (30 баллов)
        if 'КодыСтат' in yul_data:
            score += 5
        if 'УстКап' in yul_data:
            score += 5
        if 'Лицензии' in yul_data and yul_data['Лицензии']:
            score += 10
        if 'Участия' in yul_data and yul_data['Участия']:
            score += 10
    
    return min(score, 100)

def extract_comprehensive_data(fns_response: Dict, inn: str) -> Dict:
    """Извлекает максимально возможные данные из ответа ФНС"""
    
    data = {'ИНН': inn}
    
    if not fns_response or 'items' not in fns_response or not fns_response['items']:
        return data
    
    org_data = fns_response['items'][0]
    
    if 'ЮЛ' in org_data:
        yul_data = org_data['ЮЛ']
        
        # Базовые реквизиты
        basic_fields = {
            'ИНН': 'ИНН', 'КПП': 'КПП', 'ОГРН': 'ОГРН', 'ОКПО': 'ОКПО',
            'ДатаОГРН': 'Дата регистрации', 'ДатаРег': 'Дата регистрации',
            'Статус': 'Статус организации', 'НаимСокрЮЛ': 'Наименование организации',
            'НаимПолнЮЛ': 'Полное наименование организации'
        }
        
        for api_field, our_field in basic_fields.items():
            if api_field in yul_data and yul_data[api_field]:
                data[our_field] = yul_data[api_field]
        
        # Адресные данные
        if 'Адрес' in yul_data:
            address_data = yul_data['Адрес']
            if isinstance(address_data, dict):
                if 'АдресПолн' in address_data:
                    data['Юридический адрес'] = address_data['АдресПолн']
                    data['Адрес производства'] = address_data['АдресПолн']
                    data['Адрес дополнительной площадки'] = address_data['АдресПолн']
                if 'Индекс' in address_data:
                    data['Индекс'] = address_data['Индекс']
        
        # Руководитель и контакты
        if 'Руководитель' in yul_data:
            director_data = yul_data['Руководитель']
            if isinstance(director_data, dict):
                director_name = f"{director_data.get('Должн', '')} {director_data.get('ФИОПолн', '')}".strip()
                data['Руководитель'] = director_name
                data['Контактные данные руководства'] = director_name
        
        # Контактная информация
        if 'Контакты' in yul_data:
            contacts = yul_data['Контакты']
            if isinstance(contacts, dict):
                if 'Телефон' in contacts and contacts['Телефон']:
                    data['Номер телефона'] = ', '.join(contacts['Телефон'][:3])
                if 'e-mail' in contacts and contacts['e-mail']:
                    data['Электронная почта'] = contacts['e-mail'][0]
                    data['Почта руководства'] = contacts['e-mail'][0]
                if 'Сайт' in contacts and contacts['Сайт']:
                    data['Сайт'] = contacts['Сайт'][0]
        
        # Виды деятельности
        if 'ОснВидДеят' in yul_data:
            activity = yul_data['ОснВидДеят']
            if isinstance(activity, dict):
                if 'Код' in activity:
                    data['Основной ОКВЭД (СПАРК)'] = activity['Код']
                    data['Производственный ОКВЭД'] = activity['Код']
                if 'Текст' in activity:
                    activity_text = activity['Текст']
                    data['Вид деятельности по основному ОКВЭД (СПАРК)'] = activity_text
                    data['Вид деятельности по производственному ОКВЭД'] = activity_text
                    
                    # Определение отраслей
                    industry_info = determine_detailed_industries(activity_text)
                    data.update(industry_info)
        
        # Дополнительные виды деятельности
        if 'ДопВидДеят' in yul_data and yul_data['ДопВидДеят']:
            activities = []
            for activity in yul_data['ДопВидДеят']:
                if isinstance(activity, dict) and 'Текст' in activity:
                    activities.append(activity['Текст'])
            if activities:
                data['Отраслевые презентации'] = '; '.join(activities[:5])
                data['Дополнительная отрасль'] = '; '.join(activities[:2])
                data['Подотрасль (Дополнительная)'] = '; '.join(activities[:3])
        
        # Уставный капитал
        if 'Капитал' in yul_data:
            capital = yul_data['Капитал']
            if isinstance(capital, dict):
                capital_info = []
                for key, value in capital.items():
                    capital_info.append(f"{key}: {value}")
                data['Общие сведения об организации'] = '; '.join(capital_info)
        
        # Лицензии
        if 'Лицензии' in yul_data and yul_data['Лицензии']:
            licenses = []
            for license_data in yul_data['Лицензии'][:2]:
                if isinstance(license_data, dict) and 'ВидДеятельности' in license_data:
                    licenses.append(license_data['ВидДеятельности'])
            if licenses:
                data['Наличие особого статуса'] = 'Есть лицензии'
        
        # Участия в других организациях
        if 'Участия' in yul_data and yul_data['Участия']:
            participations = []
            for part in yul_data['Участия'][:3]:
                if isinstance(part, dict) and 'НаимСокрЮЛ' in part:
                    participations.append(part['НаимСокрЮЛ'])
            if participations:
                data['Головная организация'] = '; '.join(participations)
    
    return data

def determine_detailed_industries(activity: str) -> Dict:
    """Детально определяет отрасли по виду деятельности"""
    activity_lower = activity.lower()
    
    data = {}
    
    # Основная отрасль
    industry_mapping = {
        'нефть': ('Нефтегазовая промышленность', 'Добыча нефти и газа'),
        'газ': ('Нефтегазовая промышленность', 'Добыча и транспортировка газа'),
        'энерг': ('Энергетика', 'Производство электроэнергии'),
        'электр': ('Энергетика', 'Электроснабжение'),
        'металл': ('Металлургия', 'Производство металлов'),
        'сталь': ('Металлургия', 'Сталелитейное производство'),
        'хим': ('Химическая промышленность', 'Химическое производство'),
        'машиностр': ('Машиностроение', 'Производство оборудования'),
        'авто': ('Машиностроение', 'Автомобилестроение'),
        'строит': ('Строительство', 'Строительные материалы'),
        'пищев': ('Пищевая промышленность', 'Производство продуктов питания'),
        'транспорт': ('Транспорт', 'Транспортные услуги'),
        'связь': ('Телекоммуникации', 'Связь и коммуникации'),
        'телеком': ('Телекоммуникации', 'Телекоммуникационные услуги'),
        'банк': ('Финансовые услуги', 'Банковские услуги'),
        'страхован': ('Финансовые услуги', 'Страхование'),
        'фармац': ('Фармацевтика', 'Производство лекарств'),
        'лекарств': ('Фармацевтика', 'Фармацевтическое производство'),
        'железнодорож': ('Транспорт', 'Железнодорожные перевозки'),
        'авиа': ('Транспорт', 'Авиаперевозки'),
    }
    
    for keyword, (industry, subindustry) in industry_mapping.items():
        if keyword in activity_lower:
            data['Основная отрасль'] = industry
            data['Подотрасль (Основная)'] = subindustry
            data['Отрасль промышленности по Спарк и Справочнику'] = industry
            break
    else:
        data['Основная отрасль'] = 'Промышленность'
        data['Подотрасль (Основная)'] = 'Общее производство'
        data['Отрасль промышленности по Спарк и Справочнику'] = 'Промышленность'
    
    return data

def select_best_companies(api_key: str, count: int) -> List[Tuple[str, str]]:
    """Отбирает компании с наибольшей заполненностью данных"""
    
    client = FNSAPIClient(api_key)
    all_companies = get_companies_with_high_data_quality()
    
    print(f"🔍 Анализ заполненности данных для {len(all_companies)} компаний...", file=sys.stderr)
    
    company_scores = []
    
    for inn, name in all_companies:
        org_data = client.get_organization_info(inn)
        score = analyze_data_completeness(org_data)
        company_scores.append((inn, name, score, org_data))
        
        print(f"   {name}: {score}% заполнено", file=sys.stderr)
        time.sleep(0.3)  # Небольшая пауза
    
    # Сортируем по убыванию оценки заполненности
    company_scores.sort(key=lambda x: x[2], reverse=True)
    
    # Возвращаем лучшие компании
    best_companies = [(inn, name) for inn, name, score, _ in company_scores[:count]]
    
    print(f"\n🏆 Отобрано {len(best_companies)} компаний с максимальной заполненностью:", file=sys.stderr)
    for inn, name in best_companies:
        score = next(score for i, n, score, _ in company_scores if i == inn)
        print(f"   ✅ {name} ({score}% заполнено)", file=sys.stderr)
    
    return best_companies

def get_complete_template_columns() -> List[str]:
    """Возвращает полный список всех колонок из шаблона"""
    return [
        '№', 'ИНН', 'Наименование организации', 'Полное наименование организации', 'Статус СПАРК', 
        'Статус внутренний', 'Статус ИТОГ', 'Дата добавления в реестр', 'Юридический адрес', 
        'Адрес производства', 'Адрес дополнительной площадки', 'Основная отрасль', 'Подотрасль (Основная)', 
        'Дополнительная отрасль', 'Подотрасль (Дополнительная)', 'Отраслевые презентации', 
        'Основной ОКВЭД (СПАРК)', 'Вид деятельности по основному ОКВЭД (СПАРК)', 'Производственный ОКВЭД', 
        'Вид деятельности по производственному ОКВЭД', 'Общие сведения об организации', 
        'Размер предприятия (итог)', 'Размер предприятия (итог) 2022', 'Размер предприятия (по численности)', 
        'Размер предприятия (по численности) 2022', 'Размер предприятия (по выручке)', 
        'Размер предприятия (по выручке) 2022', 'Дата регистрации', 'Руководитель', 'Головная организация',
        'ИНН головной организации', 'Вид отношения головной организации', 'Контактные данные руководства', 
        'Почта руководства', 'Контакт сотрудника организации', 'Номер телефона', 
        'Контактные данные ответственного по ЧС', 'Сайт', 'Электронная почта', 'Данные о мерах поддержки', 
        'Наличие особого статуса', 'Площадка итог', 'Получена поддержка от г. Москвы', 
        'Системообразующее предприятие', 'Статус МСП', 'То самое', 'Финансово-экономические показатели',
        'Выручка предприятия, тыс. руб. 2017', 'Выручка предприятия, тыс. руб. 2018', 
        'Выручка предприятия, тыс. руб. 2019', 'Выручка предприятия, тыс. руб. 2020', 
        'Выручка предприятия, тыс. руб. 2021', 'Выручка предприятия, тыс. руб. 2022', 
        'Выручка предприятия, тыс. руб. 2023', 'Чистая прибыль (убыток),тыс. руб. 2017', 
        'Чистая прибыль (убыток),тыс. руб. 2018', 'Чистая прибыль (убыток),тыс. руб. 2019', 
        'Чистая прибыль (убыток),тыс. руб. 2020', 'Чистая прибыль (убыток),тыс. руб. 2021', 
        'Чистая прибыль (убыток),тыс. руб. 2022', 'Чистая прибыль (убыток),тыс. руб. 2023',
        'Среднесписочная численность персонала (всего по компании), чел 2017',
        'Среднесписочная численность персонала (всего по компании), чел 2018',
        'Среднесписочная численность персонала (всего по компании), чел 2019',
        'Среднесписочная численность персонала (всего по компании), чел 2020',
        'Среднесписочная численность персонала (всего по компании), чел 2021',
        'Среднесписочная численность персонала (всего по компании), чел 2022',
        'Среднесписочная численность персонала (всего по компании), чел 2023',
        'Среднесписочная численность персонала, работающего в Москве, чел 2017',
        'Среднесписочная численность персонала, работающего в Москве, чел 2018',
        'Среднесписочная численность персонала, работающего в Москве, чел 2019',
        'Среднесписочная численность персонала, работающего в Москве, чел 2020',
        'Среднесписочная численность персонала, работающего в Москве, чел 2021',
        'Среднесписочная численность персонала, работающего в Москве, чел 2022',
        'Среднесписочная численность персонала, работающего в Москве, чел 2023',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2017',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2018',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2019',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2020',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2021',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2022',
        'Фонд оплаты труда всех сотрудников организации, тыс. руб 2023',
        'Фонд оплаты труда  сотрудников, работающих в Москве, тыс. руб 2017',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб 2018',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб 2019',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб 2020',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб. 2021',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб. 2022',
        'Фонд оплаты труда  сотрудников, работающего в Москве, тыс. руб. 2023',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2017',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2018',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2019',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2020',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2021',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2022',
        'Средняя з.п. всех сотрудников организации,  тыс.руб. 2023',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2017',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2018',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2019',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2020',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2021',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2022',
        'Средняя з.п. сотрудников, работающих в Москве,  тыс.руб. 2023',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2017',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2018',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2019',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2020',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2021',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2022',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2023',
        'Налоги, уплаченные в бюджет Москвы (без акцизов), тыс.руб. 2024',
        'Налог на прибыль, тыс.руб. 2017', 'Налог на прибыль, тыс.руб. 2018',
        'Налог на прибыль, тыс.руб. 2019', 'Налог на прибыль, тыс.руб. 2020',
        'Налог на прибыль, тыс.руб. 2021', 'Налог на прибыль, тыс.руб. 2022',
        'Налог на прибыль, тыс.руб. 2023', 'Налог на прибыль, тыс.руб. 2024',
        'Налог на имущество, тыс.руб. 2017', 'Налог на имущество, тыс.руб. 2018',
        'Налог на имущество, тыс.руб. 2019', 'Налог на имущество, тыс.руб. 2020',
        'Налог на имущество, тыс.руб. 2021', 'Налог на имущество, тыс.руб. 2022',
        'Налог на имущество, тыс.руб. 2023', 'Налог на имущество, тыс.руб. 2024',
        'Налог на землю, тыс.руб. 2017', 'Налог на землю, тыс.руб. 2018',
        'Налог на землю, тыс.руб. 2019', 'Налог на землю, тыс.руб. 2020',
        'Налог на землю, тыс.руб. 2021', 'Налог на землю, тыс.руб. 2022',
        'Налог на землю, тыс.руб. 2023', 'Налог на землю, тыс.руб. 2024',
        'НДФЛ, тыс.руб. 2017', 'НДФЛ, тыс.руб. 2018', 'НДФЛ, тыс.руб. 2019',
        'НДФЛ, тыс.руб. 2020', 'НДФЛ, тыс.руб. 2021', 'НДФЛ, тыс.руб. 2022',
        'НДФЛ, тыс.руб. 2023', 'НДФЛ, тыс.руб. 2024',
        'Транспортный налог, тыс.руб. 2017', 'Транспортный налог, тыс.руб. 2018',
        'Транспортный налог, тыс.руб. 2019', 'Транспортный налог, тыс.руб. 2020',
        'Транспортный налог, тыс.руб. 2021', 'Транспортный налог, тыс.руб. 2022',
        'Транспортный налог, тыс.руб. 2023', 'Транспортный налог, тыс.руб. 2024',
        'Прочие налоги 2017', 'Прочие налоги 2018', 'Прочие налоги 2019',
        'Прочие налоги 2020', 'Прочие налоги 2021', 'Прочие налоги 2022',
        'Прочие налоги 2023', 'Прочие налоги 2024',
        'Акцизы, тыс. руб. 2017', 'Акцизы, тыс. руб. 2018', 'Акцизы, тыс. руб. 2019',
        'Акцизы, тыс. руб. 2020', 'Акцизы, тыс. руб. 2021', 'Акцизы, тыс. руб. 2022',
        'Акцизы, тыс. руб. 2023', 'Акцизы, тыс. руб. 2024',
        'Инвестиции в Мск 2021 тыс. руб.', 'Инвестиции в Мск 2022 тыс. руб.', 
        'Инвестиции в Мск 2023 тыс. руб.', 'Объем экспорта, тыс. руб. 2019',
        'Объем экспорта, тыс. руб. 2020', 'Объем экспорта, тыс. руб. 2021',
        'Объем экспорта, тыс. руб. 2022', 'Объем экспорта, тыс. руб. 2023',
        'Имущественно-земельный комплекс', 'Кадастровый номер ЗУ', 'Площадь ЗУ',
        'Вид разрешенного использования ЗУ', 'Вид собственности ЗУ', 'Собственник ЗУ',
        'Кадастровый номер ОКСа', 'Площадь ОКСов', 'Вид разрешенного использования ОКСов',
        'Тип строения и цель использования', 'Вид собственности ОКСов', 'СобственникОКСов',
        'Площадь производственных помещений, кв.м.', 'Производимая продукция',
        'Стандартизированная продукция', 'Название (виды производимой продукции)',
        'Перечень производимой продукции по кодам ОКПД 2',
        'Перечень производимой продукции по типам и сегментам', 'Каталог продукции',
        'Наличие  госзаказа', 'Уровень загрузки производственных мощностей',
        'Наличие поставок продукции на экспорт', 'Объем экспорта (млн.руб.) за предыдущий календарный год',
        'Перечень государств куда экспортируется продукция', 'Код ТН ВЭД ЕАЭС',
        'Развитие Реестра', 'Отрасль промышленности по Спарк и Справочнику',
        'Координаты юридического адреса', 'Координаты адреса производства',
        'Координаты адреса дополнительной площадки', 'Координаты (широта)',
        'Координаты (долгота)', 'Округ', 'Район'
    ]

def create_complete_template(api_key: str, count: int) -> pd.DataFrame:
    """Создает полный шаблон с данными лучших компаний"""
    
    # Отбираем компании с максимальной заполненностью
    best_companies = select_best_companies(api_key, count)
    
    if not best_companies:
        print("❌ Не удалось отобрать компании", file=sys.stderr)
        return pd.DataFrame()
    
    client = FNSAPIClient(api_key)
    all_organizations = []
    
    # Полный список всех колонок из шаблона
    template_columns = get_complete_template_columns()
    
    print(f"\n🔄 Сбор детальных данных...", file=sys.stderr)
    
    for i, (inn, name) in enumerate(best_companies, 1):
        # Создаем запись с ВСЕМИ полями из шаблона
        record = {col: 'ДАННЫЕ ОТСУТСТВУЮТ В API' for col in template_columns}
        
        # Системные поля
        record['№'] = i
        record['ИНН'] = inn
        record['Дата добавления в реестр'] = datetime.now().strftime('%Y-%m-%d')
        record['Статус внутренний'] = 'Активный'
        record['Статус ИТОГ'] = 'В работе'
        record['Системообразующее предприятие'] = 'Да'
        record['Статус МСП'] = 'Нет'
        record['Финансово-экономические показатели'] = 'ФИНАНСОВЫЕ ДАННЫЕ ОТСУТСТВУЮТ В API'
        record['Площадка итог'] = 'Основная'
        record['Получена поддержка от г. Москвы'] = 'Нет'
        record['То самое'] = 'Нет'
        
        # Базовые данные из названия
        record['Наименование организации'] = name
        record['Полное наименование организации'] = name
        
        # Получаем детальные данные
        org_data = client.get_organization_info(inn)
        if org_data:
            detailed_data = extract_comprehensive_data(org_data, inn)
            for key, value in detailed_data.items():
                if key in record:
                    record[key] = value
            
            # Статус на основе данных
            if 'Статус организации' in detailed_data:
                status = detailed_data['Статус организации']
                record['Статус СПАРК'] = 'Действующее' if 'действующ' in str(status).lower() else 'Не действующее'
        
        print(f"✅ {i}/{len(best_companies)} {name}", file=sys.stderr)
        all_organizations.append(record)
        time.sleep(0.5)
    
    return pd.DataFrame(all_organizations, columns=template_columns)

def main():
    print("🚀 Интеллектуальный сбор данных из ФНС", file=sys.stderr)
    print("=" * 45, file=sys.stderr)
    
    parser = argparse.ArgumentParser(description='Сбор данных компаний с максимальной заполненностью')
    parser.add_argument('-n', '--number', type=int, default=5, help='Количество компаний')
    parser.add_argument('--api-key', type=str, required=True, help='API ключ от ФНС')
    
    args = parser.parse_args()
    
    try:
        df = create_complete_template(args.api_key, args.number)
        
        if df.empty:
            return
        
        # Сохраняем результаты
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"fns_best_data_{args.number}_{timestamp}"
        
        df.to_excel(f"{filename}.xlsx", index=False, engine='openpyxl')
        df.to_csv(f"{filename}.csv", index=False, encoding='utf-8-sig')
        
        print(f"\n💾 Файлы сохранены:", file=sys.stderr)
        print(f"   - {filename}.xlsx", file=sys.stderr)
        print(f"   - {filename}.csv", file=sys.stderr)
        
        # Статистика заполненности
        total_cells = len(df.columns) * len(df)
        filled_cells = (df.map(lambda x: x != 'ДАННЫЕ ОТСУТСТВУЮТ В API' and pd.notna(x))).sum().sum()
        fill_percentage = (filled_cells / total_cells * 100) if total_cells > 0 else 0
        
        print(f"\n📈 Статистика заполненности:", file=sys.stderr)
        print(f"   - Всего ячеек: {total_cells}", file=sys.stderr)
        print(f"   - Заполнено: {filled_cells} ({fill_percentage:.1f}%)", file=sys.stderr)
        print(f"   - Всего полей: {len(df.columns)}", file=sys.stderr)
        print(f"   - Всего компаний: {len(df)}", file=sys.stderr)
        
        # Топ заполненных полей
        print(f"\n🏆 Самые заполненные поля:", file=sys.stderr)
        filled_stats = []
        for col in df.columns:
            filled_count = (df[col] != 'ДАННЫЕ ОТСУТСТВУЮТ В API').sum()
            if filled_count > 0:
                filled_stats.append((col, filled_count))
        
        filled_stats.sort(key=lambda x: x[1], reverse=True)
        for col, count in filled_stats[:10]:
            percentage = (count / len(df)) * 100
            print(f"   - {col}: {count}/{len(df)} ({percentage:.0f}%)", file=sys.stderr)
        
    except Exception as e:
        print(f"❌ Ошибка: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()